#!/usr/bin/python3

import sys
import os

gcc=False
ignoreList=[]
libFileIgnoreList=["test.cpp"]
libs=["stdc++"]
compilerKeys=["Wall", "Wextra"]
gccKeys=[]
clangKeys=["Wno-undefined-var-template"]
includeDirs=[]
libDirs=[]
outputStaticLibName="libblessings_static.a"
outputSharedLibName="libblessings_shared.so"
prefix="$(HOME)/.prefix"
includeDirName="blessings" #shold be nonempty

args=sys.argv[1:]
i=0
while(i<len(args)): #Yeah, no for i in range(...):
    if args[i]=="--gcc":
        gcc=True
    elif args[i][:8]=="--ignore":
        ignoreList.append(args[i+1])
        i+=1
    elif args[i][:5]=="--lib":
        libs.append(args[i+1])
        i+=1
    elif args[i][:13]=="--compilerKey":
        compilerKeys.append(args[i+1])
        i+=1
    elif args[i][:8]=="--libDir":
        libDirs.append(args[i+1])
        i+=1
    elif args[i][:12]=="--includeDir":
        includeDirs.append(args[i+1])
        i+=1
    else:
        print("Bad argument ", args[i])
        exit(1)

    i+=1

if gcc:
    compilerKeys=compilerKeys+gccKeys
else:
    compilerKeys=compilerKeys+clangKeys

libsStr=""
for lib in libs:
    libsStr=libsStr+" -l"+lib
compilerKeysStr="";
for key in compilerKeys:
    compilerKeysStr=compilerKeysStr+" -"+key
includeDirsStr=""
for includeDir in includeDirs:
    includeDirsStr=includeDirsStr+" -I "+includeDir
libDirsStr=""
for libDir in libDirs:
    libDirsStr=libDirsStr+" -L "+libDir

tempFile="configureTemp.x1zasd"
makefile=[]
structure=[]
headers=[]

currPath=os.getcwd()

def walk(dir):
    for name in os.listdir(dir):
        path = os.path.join(dir, name)
        if os.path.isfile(path):
            if name[-4:]!=".cpp":
                continue

            if path[len(currPath)+1:] in ignoreList:
                print("Ignoring "+path[len(currPath)+1:])
                continue

            print("Working with "+path[len(currPath)+1:])

            os.system("g++ --std=c++14 -MM -MF "+tempFile+" -MT build/"+path[len(currPath)+1:-3]+"o "+path)

            f=open(tempFile, "r")
            lines=f.readlines();
            f.close()

            structure.append([path[len(currPath)+1:], "build/"+path[len(currPath)+1:-3]+"o",lines])
        else:
            if name==".git":
                continue
            walk(path)

walk(currPath)

def walkHeaders(dir):
    for name in os.listdir(dir):
        path = os.path.join(dir, name)
        if os.path.isfile(path):
            if name[-4:]!=".hpp":
                continue

            headers.append(path[len(currPath)+1:])
        else:
            if name==".git":
                continue
            walkHeaders(path)

walkHeaders(currPath)

#.o goals
for triple in structure:
    for string in triple[2]:
        makefile.append(string)

    secondStr="\tmkdir -p "+triple[1][:-len(triple[1].split("/")[-1])]+"\n"

    thirdStr=""

    if not gcc:
        thirdStr="\tclang --std=c++14 -fpic -c -o "+triple[1]+compilerKeysStr+includeDirsStr+" "+triple[0]+"\n"
    else:
        thirdStr="\tg++ --std=c++14 -fpic -c -o "+triple[1]+compilerKeysStr+includeDirsStr+" "+triple[0]+"\n"

    makefile.append(secondStr)
    makefile.append(thirdStr)


#lib
firstStr="lib: lib_shared lib_static\n"
makefile=[firstStr]+makefile


#lib_static
firstStr="lib_static:"
for triple in structure:
    if triple[0] in libFileIgnoreList:
        continue

    firstStr=firstStr+" "+triple[1]
firstStr=firstStr+"\n"

secondStr="\tar rcs "+outputStaticLibName+" $^\n"

makefile.append(firstStr)
makefile.append(secondStr)


#lib_shared
firstStr="lib_shared:"
for triple in structure:
    if triple[0] in libFileIgnoreList:
        continue

    firstStr=firstStr+" "+triple[1]
firstStr=firstStr+"\n"

if not gcc:
    secondStr="\tclang --std=c++14 -shared -o "+outputSharedLibName+compilerKeysStr+" $^\n"
else:
    secondStr="\tg++ --std=c++14 -shared -o "+outputSharedLibName+compilerKeysStr+" $^\n"

makefile.append(firstStr)
makefile.append(secondStr)


#test
firstStr="test:"
for triple in structure:
    firstStr=firstStr+" "+triple[1]
firstStr=firstStr+"\n"

secondStr=""
if not gcc:
    secondStr="\tclang --std=c++14 -o work"+compilerKeysStr+libsStr+libDirsStr+" $^\n"
else:
    secondStr="\tg++ --std=c++14  -o work"+compilerKeysStr+libsStr+libDirsStr+" $^\n"

makefile=makefile+[firstStr]+[secondStr]


#clean
makefile=makefile+["clean:\n\trm -rf build\n\trm -f work\n\trm -f "+outputStaticLibName+"\n"\
    +"\trm -f "+outputSharedLibName+"\n"]


#install
makefile.append("install:\n")
for header in headers:
    makefile.append("\tmkdir -p "+prefix+"/usr/include/"+includeDirName+"/"+header[:-len(header.split("/")[-1])]+"\n")
    makefile.append("\tcp "+header+" "+prefix+"/usr/include/"+includeDirName+"/"+header+"\n");
makefile.append("\tmkdir -p "+prefix+"/usr/lib/"+"\n")
makefile.append("\tcp "+outputStaticLibName+" "+prefix+"/usr/lib/"+outputStaticLibName+"\n");
makefile.append("\tcp "+outputSharedLibName+" "+prefix+"/usr/lib/"+outputSharedLibName+"\n");

#uninstall
makefile.append("uninstall:\n")
makefile.append("\trm -rf "+prefix+"/usr/include/"+includeDirName+"\n")
makefile.append("\trm -f "+prefix+"/usr/lib/"+outputStaticLibName+"\n");
makefile.append("\trm -f "+prefix+"/usr/lib/"+outputSharedLibName+"\n");

f=open("Makefile", "w")
for line in makefile:
    f.write(line)
f.close()

os.remove(tempFile)
